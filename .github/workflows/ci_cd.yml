name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: fare-recommendation-dev-model-api
  ECS_SERVICE: fare-recommendation-dev-api
  ECS_CLUSTER: fare-recommendation-dev-cluster
  TERRAFORM_VERSION: 1.3.7

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        pytest tests/ --cov=src/ --cov-report=xml
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  train-model:
    name: Train Model
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Generate data
      run: |
        python src/data/generate_data.py --samples 10000 --output data/raw/train_fares.csv --upload-s3 --s3-bucket ${{ secrets.RAW_DATA_BUCKET }} --s3-prefix raw/
        
    - name: Process data with PySpark
      run: |
        pip install pyspark
        python -m src.data.process_data --input s3://${{ secrets.RAW_DATA_BUCKET }}/raw/train_fares_latest.csv --output s3://${{ secrets.PROCESSED_DATA_BUCKET }}/processed/latest/
        
    - name: Train model
      run: |
        python -m src.model.train --data-path s3://${{ secrets.PROCESSED_DATA_BUCKET }}/processed/latest/ --model-name fare_recommendation_model --mlflow-tracking-uri ${{ secrets.MLFLOW_TRACKING_URI }}
        
    - name: Evaluate model
      run: |
        python -m src.model.evaluate --model-uri models:/fare_recommendation_model/latest --data-path s3://${{ secrets.PROCESSED_DATA_BUCKET }}/processed/latest/ --output-dir ./evaluation_results
        
    - name: Upload evaluation results
      uses: actions/upload-artifact@v3
      with:
        name: model-evaluation
        path: ./evaluation_results/

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f infra/docker/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Terraform Init
      working-directory: ./infra/terraform
      run: terraform init
      
    - name: Terraform Validate
      working-directory: ./infra/terraform
      run: terraform validate
      
    - name: Terraform Plan
      working-directory: ./infra/terraform
      run: terraform plan -out=tfplan
      
    - name: Terraform Apply
      working-directory: ./infra/terraform
      run: terraform apply -auto-approve tfplan
      
    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment